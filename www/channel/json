#!/usr/bin/perl -w
use strict;
use warnings;
use utf8;
use FindBin;
FindBin::again();
#use CGI::Carp qw(warningsToBrowser fatalsToBrowser);
use CGI qw(:standard escape escapeHTML -utf8);
use Encode;
use JSON;
use Cache::Memcached;
use LWP::Simple qw(!head);
use XML::Bare;
use File::Basename;
use Benchmark;
use Time::HiRes qw(gettimeofday tv_interval);
use Data::Dumper;

my ($BM1, $T01) = (new Benchmark, [gettimeofday]);
CGI->compile();

# This line should be commented out if output data is encoded properly.
#binmode STDOUT, ":encoding(UTF-8)";

our $q    = new CGI; $q->charset('utf-8'); # for proper escapeHTML
our $json = new JSON; $json->allow_nonref->allow_blessed->utf8(1)->pretty(1);
our $port = $q->server_port;
our $api_name = $q->path_info || "/";
our @cafe_apis = (
  qq(http://127.0.0.1:$port/channel/report$api_name),
  qq(http://127.0.0.1:$port/channel/report$api_name),
  qq(http://127.0.0.1:$port/channel/report$api_name),
  qq(http://110.45.208.13:$port/drp/cafe/channel),
  qq(http://110.45.208.14:$port/drp/cafe/channel),
  qq(http://110.45.208.69:$port/drp/cafe/channel),
);
our $content_type = "application/json"; # http://en.wikipedia.org/wiki/JSON#MIME_type
our $cache = new Cache::Memcached {
  servers => [qw(
    127.0.0.1:11211
    127.0.0.1:11211
    127.0.0.1:11211
  )],
  debug => 0,
};

my @folder_id = param('id');
my $expire_time = 3;

if ( $port == 81 ) {
  $expire_time = 86400 * 20;
  print $q->header(-charset=>'utf-8',
    -type=>$content_type,
    -expires=>'+20days',
    -cache_control => q(public, s-maxage=).(86400*20),
  );
} else {
  print $q->header(-charset=>'utf-8',
    -type=>$content_type,
    -expires=>'+'.$expire_time.'s',
    -cache_control => qq(public, s-maxage=$expire_time),
  );
}

my @urls = map { join("/", $cafe_apis[ $_ % 3 ], $_); } @folder_id;
my $cached_data = $cache->get_multi( @urls );
#print Dumper($cached_data), "\n";;
my @data = map {
  my $data = $cached_data->{$_};
  if ( not defined $data ) {
    my $fetched = fetch_cafe_channel($_);
    $data = $fetched->{channel} || {};
    $cache->set($_, $data);
    $data->{debug} = "fetched at ".scalar localtime;
  } else {
    $data->{debug} = "from memcached";
  }
  $data;
} @urls;

print $json->encode( \@data );
#print $json->encode( { error => "unknown api ", url => $url } );

exit;

sub fetch_cafe_channel {
  my $url = shift;
  my $string = LWP::Simple::get($url) or return { channel => undef };
  #utf8::encode($string);
#print "string=$string\n";
  my $data = $json->decode($string) or return { channel => undef };
#print "data=$data\n";
  return $data;
}

