#!/usr/bin/perl -w

use Benchmark;
use Time::HiRes qw(gettimeofday tv_interval);
my ($t1, $t01) = (new Benchmark, [gettimeofday]);
use strict;
use warnings;
use utf8;
use CGI qw(:standard escape escapeHTML -oldstyle_urls);
use Daum::ShortenURL;
use POSIX;

binmode STDOUT, ":encoding(UTF-8)";

our @DEBUG;
our @fields_url_trans = qw(created_on count);

my $q     = new CGI; $q->charset('utf-8'); # for proper escapeHTML
my $website = param('website');
my $original_url = param('original_url');
my $shorten = new Daum::ShortenURL;

print $q->header(-charset=>'utf-8', -type=>'text/html');
print start_html(-title=>'List of url_translation',
                 -encoding=>'utf-8',
                 -style=>{-src=>"/css/style.css"},
      );

my ($begin,$end) = timeline_range();
my $list = $shorten->timeline($begin,$end,$website,$original_url);

my @list = map { $$list{$_} } sort { $b <=> $a } keys %$list;

print qq(<table class="list"><tr>\n);
map { print "<td class=\"head $_\">$_</td>\n"; } @fields_url_trans;
print "</tr>\n";

foreach my $row ( @list )
{
  my $redirect = "redirect?u=". escape($row->{shorten_url});
  map { utf8::decode($row->{$_}); } qw(shorten_url original_url original_title website);
  print "<tr>\n";
  print qq(<td class="url_id">$row->{url_id}</td>\n);
  print qq(<td class="shorten_url"><a href="$redirect" target="_blank">$row->{shorten_url}</a></td>\n);
  print qq(<td class="original_url"><a href="$row->{original_url}" target="_blank">$row->{original_url}</a></td>\n);
  print qq(<td class="original_title">$row->{original_title}</td>\n);
  print qq(<td class="website"><a href="?website=$row->{website}">$row->{website}</a></td>\n);
  map {
    print qq(<td class="$_">$row->{$_}</td>\n);
  }
  qw(
     created_on updated_on http_code mime_type source
     has_no_info has_original_url has_title has_image
     is_dead is_unreachable);
  print "</tr>\n";
}  

print qq(</table>\n);


my ($t2, $t02) = (new Benchmark, [gettimeofday]);
print p({class=>'debug'}, "elapsed=", tv_interval($t01, $t02))."\n";
print p({class=>'debug'}, "benchmark=", timestr(timediff($t2, $t1)))."\n";
map { print p({class=>'debug'}, $_); } $shorten->debug if url(-absolute=>1) =~ m/debug/;
map { print p({class=>'debug'}, $_); } @DEBUG if url(-absolute=>1) =~ m/debug/;

exit;

sub timeline_range
{
  my $begin = shift || POSIX::strftime("%Y%m%d000000", localtime);
  my $end = POSIX::strftime("%Y%m%d235959", localtime);
  return ($begin, $end);
}

1;
