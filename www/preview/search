#!/usr/bin/perl -w

use lib '../../lib';
use Benchmark;
use Time::HiRes qw(gettimeofday tv_interval);
my ($t1, $t01) = (new Benchmark, [gettimeofday]);
use strict;
use warnings;
use utf8;
use CGI qw(:standard escape escapeHTML -oldstyle_urls);
use LWP::UserAgent;
use LWP::Simple qw(!head);
use Unicode::String qw(utf8);
use Daum::FederatedSearch;

our @DEBUG;
binmode STDOUT, ":encoding(UTF-8)";

our $q     = new CGI; $q->charset('utf-8'); # for proper escapeHTML

print $q->header(-charset=>'utf-8', -type=>'text/html');

my $fsearch = new Daum::FederatedSearch(query=>$q);
$fsearch->handler('realTimeColl', \&realTimeColl);
$fsearch->handler('snsColl', \&snsColl);
$fsearch->add_tab('sns', '소셜웹', 'w=sns&q=%s&enc=utf8&nul_search=btn');

if ($fsearch->fetch_search_result($q)) {
  print $fsearch->html_head;
  print $fsearch->html_body;

  if (self_url =~ m/debug/) {
    map { print $_, "\n"; } $fsearch->debug;

    my ($t2, $t02) = (new Benchmark, [gettimeofday]);
    print p("elapsed=", tv_interval($t01, $t02))."\n";
    print p("benchmark=", timestr(timediff($t2, $t1)))."\n";
  }
  print $fsearch->html_body_close;
} else {
  print $fsearch->status_line;
}

exit;
##############################################################################

sub snsColl {
  my $self = shift;
  my $h = "";
  my $query = $q->param('q') || "iphone4";
  my $query_escaped = escape($q->param('q')) || "";
  my $where = $q->param('w') || "";
  my $page  = 1;
  my $base_url = "http://110.45.208.13:8080/debug/sns?q=%s&p=%s&w=$where";
  my $search_url = sprintf($base_url, escape($query),$page);
  #my $html = LWP::Simple::get($search_url);
  #utf8::decode($html);
  #return $html;

  $h = <<END;
<!-- SNS Coll -->
<div id="snsColl">
  <div class="collTitle">
    <h2 class="fL">소셜웹 <span id="snsSQC_coll" style="display: none;"></span></h2>
  </div>
  <div class="collTot">
    <ul class="uccUl">
END
  my @entries = (
    { content_url=>'http://www.daum.net/', title=>'준비 중입니다.',
      desc=>'아직 준비 중입니다.', meta_url=>'http://blog.daum.net/', meta_name=>'닉네임' },
    { content_url=>'http://www.daum.net/', title=>'준비 중입니다.',
      desc=>'아직 준비 중입니다.', meta_url=>'http://blog.daum.net/', meta_name=>'닉네임' },
  );
  foreach my $entry ( @entries ) { $h .= html_list_entry(%$entry); }
  $h .= <<END;
    </ul>
  </div>
  <div class="moreArea">
    <a href="?w=sns&q=$query_escaped">소셜네트워크 더보기</a>
  </div>
</div>
<!-- end SNS Coll -->
<!-- 구분라인 -->
<div id="line"></div>
<hr>
<!-- end 구분라인 -->
END
}

sub html_list_entry
{
  my %item = @_;
  if (exists $item{source} and $item{source} eq 'twitter')
  {
    return <<END;
<li>
  <div class="divAniBox">
    <div class="thumb fL">
      <a href="$item{content_url}" target="_blank">
        <img src="$item{thumbnail}" width="48" height="48" alt/>
      </a>
    </div>
    <div class="commentBox">
      <div class="commentBody">
        <p class="base desc">$item{desc}</p>
        <p class="info">
          <a href="$item{content_url}" target="_blank" class="getTime">
            <span id="getSNSIndexTime_9" class="getTime">
              <script type="text/javascript">try{document.write(_jsMakeRealTimeDate(''));}catch(e){}</script>
            </span>
          </a>
          <span class="vline"> | </span>
          <span class="nick"><a href="$item{meta_url}" target="_blank" class="g_tit">$item{user_nick}</a></span>
          <span class="vline"> | </span>
          <span class="source"><a href="$item{content_url}" target="_blank" class="g_tit">트위터 원문보기</a></span>
        </p>
      </div>
      <div class="commentFoor"></div>
    </div>
    <div class="clr"></div>
  </div>
</li>
END
  } else {
    return <<END;
<li>
  <div class="divAniBox">
    <div class="textBox">
      <a href="$item{content_url}" class="gtit" target="_blank">$item{title}</a>
      <p class="base desc">$item{desc}</p>
      <p class="info">
        <span id="getSNSIndexTime_9" class="getTime">
          <script type="text/javascript">try{document.write(_jsMakeRealTimeDate(''));}catch(e){}</script>
        </span>
        <span class="vline"> | </span>
        <span class="source"><a href="$item{meta_url}" target="_blank" class="g_tit">$item{meta_name}</a></span>
      </p>
    </div>
    <div class="clr"></div>
  </div>
</li>
END
  }

}

##############################################################################

sub realTimeColl {
  my $self = shift;
  my $html = shift;

  my $separator = qr{<\/li>\s*<li>|<li>|<\/li>};
  my @items = split(/($separator)/, $html);
  foreach ( @items ) {
    next if m/$separator/o;
    my ($class,$source) = ("","");
    m!<p\sclass="info">\s*<a\shref="([^"]+)"!isogx and $source = $1;
    $class = "twitter" if index($source, "twitter.com")> 0;

    s{ (?<=<p\sclass="base\sdesc"> )   # not $1
       ( .{0,500} )                    # $1
       (?=</p> \s* <p\sclass="info">)  # not $2
     }
    ! make_autolink($1,$class,$source) !isogxe;
  }
  my $modified = join("<!-- XYZ -->", @items);

  return $modified;
}

sub make_autolink {
  $_ = shift;
  my $class  = shift || "";
  my $source = shift || "";

  # @username link
  s{ ( ^ | \s | [^A-Za-z0-9] )     # $1
     \@                           
     ([A-Za-z0-9_]+)               # $2
   } ! qq($1\@<a href="http://twitter.com/$2" target="_blank" class="g_tit twitter">$2</a>) !isogxe
   if $class eq "twitter";

  # #keyword link
  s{ ( ^ | \s | [^A-Za-z0-9&] )     # $1
     \#
     ([A-Za-z0-9_\w]+ | \w+_ )     # $2
   } ! qq(^$1^<a href="http://twitter.com/search?q=)
       .escape("#$2").
       qq(" target="_blank" class="g_tit twitter">#$2</a>) !isogxe
   if $class eq "twitter";

  # 이미 URL에 링크가 걸려 있는 경우
  s{ <a \s+ class="stit" 
        \s+ href=" \s*
        (https?://
         [\w-]+ (?: \.[\w-]+)+ (?: / [^\s\)\>\<]{1,200} )?
        ) \s* "                       # $1
        \s+ target="_blank"
        (?: \s+ class="stit" )?> \s*
        ( (?: \w|<b>|</b>|[:/-]|[^\s\)\>\<] ){1,200}
        )                             # $2
        \s* </a>
   } ! url_link($1,$2,$class,$source) !isogxe;
         # https?://
         # [\w-]+ (?: \.[\w-]+)+ (?: / [^\s\)\>\<]{1,200} )?

  # 텍스트로 URL만 있는 경우
  #s{$Daum::FederatedSearch::url_pattern} !url_link($1,$class,$source)!ioxge;
  s{
     (?xi)
       #\b  # replaced by line below
       (\s | (?<!url)\( | \< | ^) # \K # look-behind assertion # FIXME: \K requires perl 5.9.5
     (                       # Capture 1: entire matched URL
       (?:
         https?://               # http or https protocol
         |                       #   or
         www\d{0,3}[.]           # "www.", "www1.", "www2." … "www999."
         |                           #   or
         [a-z0-9.\-]+[.][a-z]{2,4}/  # looks like domain name followed by a slash
       )
       (?:                       # One or more:
         [^\s()<>]+                  # Run of non-space, non-()<>
         |                           #   or
         \(([^\s()<>]+|(\([^\s()<>]+\)))*\)  # balanced parens, up to 2 levels
       )+
       (?:                       # End with:
         \(([^\s()<>]+|(\([^\s()<>]+\)))*\)  # balanced parens, up to 2 levels
         |                               #   or
         [^\s`!()\[\]\{\};:'".,<>?«»“”‘’]        # not a space or one of these punct chars
       )
     )
  } !$1.url_link($2,$2,$class,$source)!ioxge;
   
  return $_;
}

sub url_link {
  my $src    = shift || "";
  my $url    = shift || "";
  my $class  = shift || "";
  my $source = shift || "";
  $src = "http://$src" unless $src =~ m#^https?://#;

  my $href = "redirect?u=". escape($src) ."&referer=". escape($source); 
  my $rel  = "get?u=". escape($src) ."&referer=". escape($source); 
  $rel  = "get?u=". escape($src) ."&fetch=1&save=0&referer=". escape($source)
    if self_url =~ m/debug/;

  return qq(<a href="$href" target="_blank" class="stit auto tips $class" rel="$rel"
 xxtitle="about this link:">$url</a>);
}


##############################################################################
# XXX url encoding by charset
# UTF-8  - 월드컵 - %EC%9B%94%EB%93%9C%EC%BB%B5
# EUC-KR - 월드컵 - %BF%F9%B5%E5%C4%C5
##############################################################################
