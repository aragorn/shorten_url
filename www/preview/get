#!/usr/bin/perl -w

use lib '/home/aragorn/perl/lib/perl5/site_perl';
use lib '/home/aragorn/preview/lib';
use Benchmark;
use Time::HiRes qw(gettimeofday tv_interval);
my ($t1, $t01) = (new Benchmark, [gettimeofday]);
use strict;
use warnings;
use CGI qw(:standard escape escapeHTML -oldstyle_urls);
use Daum::ShortenURL;

our @DEBUG;

my $q       = new CGI; $q->charset('utf-8'); # for proper escapeHTML
my $url     = param('u') || "";
my $referer = param('referer') || "";
my $fetch   = 1;
my $save    = 1;
my $shorten = new Daum::ShortenURL;

print $q->header(-charset=>'utf-8', -type=>'text/html');

my ($row,$res) = $shorten->lookup_local($url,$referer);

if ($q->self_url =~ m/debug/) {
  $fetch   = param('fetch') || 0;
  $save    = param('save')  || 0;
}

print p({class=>'debug'}, "executes fetch_and_save($url,$referer), fetch=$fetch")."\n"
  if not exists $row->{url_id} and $fetch and $q->self_url =~ m/debug/;

if (not exists $row->{url_id} and $fetch and $save) {
  ($row,$res) = $shorten->fetch_and_save($url,$referer);
} elsif (not exists $row->{url_id} and $fetch) {
  ($row,$res) = $shorten->fetch($url,$referer);
}

my ($title,$original_url) = map { $row->{$_} || "" } qw(original_title original_url);
$title = "제목이 없습니다" unless $title;
my $highlighted_url = highlighted_url($original_url);

print <<END;
<p class="title"><a href="$original_url">$title</a></p>
<p class="url highlighted">$highlighted_url</p>
<p class="url hidden">$original_url</p>
END

if ($q->self_url =~ m/debug/) {
  my ($t2, $t02) = (new Benchmark, [gettimeofday]);
  print p({class=>'debug'}, "elapsed time=", tv_interval($t01, $t02), "secs")."\n";
  print p({class=>'debug'}, "benchmark=", timestr(timediff($t2, $t1)))."\n";
  print p({class=>'debug'}, "loaded from local db")."\n" if $row->{url_id};
  print p({class=>'debug'}, "fetch=$fetch")."\n";

  foreach my $k ( keys %{$row} )
  { next if $k =~ m/^_/; print p({class=>'debug'}, "row{$k} = ". escape($row->{$k}) ), "\n"; }
  foreach ( @DEBUG ) { print p({class=>'debug'}, $_),"\n"; }
  foreach ( $shorten->debug ) { print p({class=>'debug shorten'}, $_),"\n"; }
  print p({class=>'debug'}, "reload ",
          a({href=>$q->script_name."?".$q->query_string},
            $q->unescape($q->script_name ."?". $q->query_string))),"\n";
}

exit;

sub highlighted_url 
{
  $_ = shift;
  my $shorten = $_;
  m! ^ ( https?:// )
      ( [\w\.]* / )
      ( (?:[^\/\?]* /)* )
      ( [^\/\?]+ | [^\/\?]+ / )
      #( [^\/\?]* )
      ( \?.* )? $
  !iox and do {
    my @u = (0,$1,$2,$3,$4,$5);
    $u[2] = substr($2, 0, 15) . "../" if length $2 > 17; # domain
    $u[3] = substr($3, 0,  7) . "../" if length $3 >  9; # path
    $u[4] = substr($4, 0, 38) . ".." if length $4 > 40;  # page
    $u[5] = substr($5, 0, 10) . ".." if length $5 > 12;  # query
    #$shorten = join("#", $1, $2, $3, $4, $5);
    $shorten = join("", $1, $2, $3, $4, $5);
    $shorten = join("", $1, $2, $3, $4, $u[5]) if length $shorten > 70;
    $shorten = join("", $1, $2, $u[3], $4, $u[5]) if length $shorten > 70;
    $shorten = join("", $u[1], $u[2], $u[3], $u[4], $u[5]) if length $shorten > 80;
    $shorten = join("", $u[1], $u[2], $u[3], $u[4], $u[5] ? "?.." : "") if length $shorten > 80;
    $shorten = join("", $u[1], $u[2], $u[3] ? "../" : "", $u[4], $u[5] ? "?.." : "") if length $shorten > 80;
    $shorten = join("", $u[1], $u[2], ($u[3] || $u[4] || $u[5] ) ? "..." : "") if length $shorten > 80;
=rem
    $shorten = join("",
      #span({class=>'dimmed'}, $1),
      $2,
      span({class=>'dimmed'}, $3),
      $4,
      span({class=>'dimmed'}, $5),
    );
=cut
  };
  return $shorten;
}


