#!/usr/bin/perl -w

use Benchmark;
use Time::HiRes qw(gettimeofday tv_interval);
my ($t1, $t01) = (new Benchmark, [gettimeofday]);
use strict;
use warnings;
use utf8;
use CGI qw(:standard escape unescape escapeHTML -oldstyle_urls);
use CGI::Carp qw(fatalsToBrowser);
use JSON;
use Daum::ShortenURL;
use Encode;

our @DEBUG;

my $q       = new CGI;
my $url     = param('u')       || "";
my $referer = param('referer') || "";
my $format  = param('fmt')     || "json";
our $charset = param('charset')   || "utf-8";
$charset = "utf-8" if $charset =~ m/^utf-?8$/io;
our $callback = param('callback') || "socialFunc";
my $fetch   = param('fetch')   || 'yes';
my $save    = param('save')    || 'yes';
my $shorten = new Daum::ShortenURL;
our $json    = new JSON; $json->allow_nonref;
$q->charset($charset); # for proper escapeHTML
binmode STDOUT, ":encoding(UTF-8)" if $charset eq "utf-8";

my $output_type = "application/json";
$output_type = "application/javascript"  if $format eq "js";
$output_type = "text/html" if $format eq "html";
$output_type = "text/xml"  if $format eq "xml";
our $top_label = "preview";

print $q->header(-charset=>$charset, -type=>$output_type);
prn_header($format);

my ($row,$res) = $shorten->lookup_local($url,$referer);
$shorten->forward($url) unless exists $row->{url_id};

if (url(-absolute=>1) =~ m/debug/) {
  $fetch   = param('fetch') || 'no';
  $save    = param('save')  || 'no';
}

if (not exists $row->{url_id} and $fetch eq 'yes' and $save eq 'yes') {
  print p({class=>'debug'}, "executes fetch_and_save($url,$referer)")."\n"
    if url(-absolute=>1) =~ m/debug/;
  ($row,$res) = $shorten->fetch_and_save($url,$referer);
} elsif (not exists $row->{url_id} and $fetch eq 'yes') {
  print p({class=>'debug'}, "executes fetch($url,$referer)")."\n"
    if url(-absolute=>1) =~ m/debug/;
  ($row,$res) = $shorten->fetch($url,$referer);
}

my ($title,$original_url,$http_code) = 
  map { $row->{$_} || "" } qw(original_title original_url http_code);
#$title = "제목이 없습니다" unless $title;
my $highlighted_url = $shorten->shorten_url($original_url);

($title, $original_url, $highlighted_url, $url)
  = map { Encode::encode($charset, $_) }
     ($title, $original_url, $highlighted_url, $url)
  unless $charset eq "utf-8";

my $display = "true";
$display = "false" if length $title == 0 and $url eq $original_url;
$display = "false" if length $original_url == 0;
$display = "false" unless $http_code eq "200";

if ($format eq "json"
 or $format eq "js") {
  print qq("title": ), $json->encode($title), qq(,\n);
  print qq("url": ), $json->encode($url), qq(,\n);
  print qq("original_url": ), $json->encode($original_url), qq(,\n);
  print qq("highlighted_url": ), $json->encode($highlighted_url), qq(,\n);
  print qq("display": ), $json->encode($display), qq(,\n);
  print qq("http_code": ), $json->encode($http_code), qq(,\n);
} elsif ($format eq "xml") {
  my ($esc_title, $esc_ourl, $esc_hurl, $esc_url)
    = map { $_ =~ s/\]\]>/\]>/og; $_; } ($title, $original_url, $highlighted_url, $url);
  print qq(<title><![CDATA[$esc_title]]></title>\n);
  print qq(<url><![CDATA[$esc_url]]></url>\n);
  print qq(<original_url><![CDATA[$esc_ourl]]></original_url>\n);
  print qq(<highlighted_url><![CDATA[$esc_ourl]]></highlighted_url>\n);
  print qq(<display><![CDATA[$display]]></display>\n);
  print qq(<http_code><![CDATA[$http_code]]></http_code>\n);
} else {
  print <<END;
<p class="title"><a href="$original_url">$title</a></p>
<p class="url highlighted">$highlighted_url</p>
<p class="url original hidden">$original_url</p>
<p class="url hidden">$url</p>
<p class="display">$display</p>
<p class="http_code">$http_code</p>
END
}

if (url(-absolute=>1) =~ m/debug/) {
  my ($t2, $t02) = (new Benchmark, [gettimeofday]);
  prn_debug($format, "elapsed time=", tv_interval($t01, $t02), "secs");
  prn_debug($format, "benchmark=", timestr(timediff($t2, $t1)));
  prn_debug($format, "loaded from local db") if $row->{url_id};
  prn_debug($format, "fetch=$fetch");

  foreach my $k ( keys %{$row} )
  { next if $k =~ m/^_/; prn_debug($format, "row{$k} = ". escape($row->{$k}) ); }
  foreach ( @DEBUG ) { prn_debug($format, $_); }
  foreach ( $shorten->debug ) { prn_debug($format, $_); }
  print p({class=>'debug'}, "reload ",
          a({href=>$q->script_name."?".$q->query_string},
            $q->unescape($q->script_name ."?". $q->query_string))),"\n" if $format eq "html";
}
prn_footer($format);

exit;

our $debug_no = 0;

sub prn_debug {
  my $type = shift || "json";
  my $msg = join("", @_);
  $msg = Encode::encode($charset, $msg);
  $debug_no ++;
  if    ($type eq "json"
      or $type eq "js"  ) { print qq("debug$debug_no": ), $json->encode($msg), qq(,\n); }
  elsif ($type eq "xml" ) { print qq(<debug><![CDATA[$msg]]></debug>\n) if $msg =~ s/\]\]>/\]>/og or 1; }
  else                    { print qq(<p class="debug">$msg</p>\n); }
}

sub prn_header {
  my $type = shift || "json";
  if    ($type eq "js"  ) { print qq#if(typeof $callback === "function") $callback({"$top_label": {\n#; }
  elsif ($type eq "json") { print qq({"$top_label": {\n); }
  elsif ($type eq "xml" ) { print qq(<?xml version="1.0" encoding="UTF-8"?>\n<$top_label>\n); }
  else                    { print qq(<div class="$top_label">\n); }
}
sub prn_footer {
  my $type = shift || "json";
  if    ($type eq "js"  ) { print qq#"dummy":"null"}});\n#; }
  elsif ($type eq "json") { print qq("dummy":"null"}}\n); }
  elsif ($type eq "xml" ) { print qq(</$top_label>\n); }
  else                    { print qq(</div><!--class="$top_label"-->\n); }
}

1;
