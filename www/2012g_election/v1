#!/usr/bin/perl -w
use strict;
use warnings;
use utf8;
use FindBin;
FindBin::again();
use CGI::Carp qw(warningsToBrowser fatalsToBrowser);
use CGI qw(:standard escape escapeHTML -utf8 -oldstyle_urls);
use JSON;
use Encode;
use Benchmark;
use Time::HiRes qw(gettimeofday tv_interval);

my ($BM1, $T01) = (new Benchmark, [gettimeofday]);

CGI->compile();

# This line should be commented out if output data is encoded properly.
#binmode STDOUT, ":encoding(UTF-8)";

our $q       = new CGI; $q->charset('utf-8'); # for proper escapeHTML
our $json    = new JSON; $json->allow_nonref->allow_blessed->utf8(1)->pretty(1);

# You should not call CGI::path_info() which does not support
# debugging mode from cmdline input.
my (undef, $query) = split(/\//o, $q->path_info() || "/index", 2);
my $from     = param('from')  || 0;
my $count    = param('count') || 100;
my $callback = param('callback');
my $content_type = "application/json"; # http://en.wikipedia.org/wiki/JSON#MIME_type
   $content_type = "application/javascript" if $callback; # JSONP
my $full_url = $q->url(-full=>1);

print $q->header(-charset=>'utf-8', -type=>$content_type);
print jsonp_header($callback);

my %dispatch = (
  index                       => \&handler_index,
  district_list               => \&district_list,
  district                    => \&district,
  sns_map                     => \&sns_map,
  sns_map_detail              => \&sns_map_detail,
  realtime_ddm_dynamic_status => \&realtime_ddm_dynamic_status,
  realtime_ddm_dynamic_list   => \&realtime_ddm_dynamic_list,
  candidate                   => \&election_candidate,
);

my $output = {};
if ( defined $dispatch{$query} ) {
  my %result = &{$dispatch{$query}};
  map { $output->{$_} = $result{$_}; } keys %result;
} else {
  $output->{hello} = "world!";
}

decode_utf8_in_complex_data($output);

my ($BM2, $T02) = (new Benchmark, [gettimeofday]);
$output->{debug_info} = debug_info($BM1, $BM2, $T01, $T02);

print $json->encode($output);
print jsonp_footer($callback);

1;

sub jsonp_header {
  my ($callback) = @_;
  return <<END if $callback;
if (typeof $callback === "function") $callback(
END
  return "";
}

sub jsonp_footer {
  my ($callback) = @_;
  return <<END if $callback;
);
END
  return "";
}

sub debug_info {
  my ($t1, $t2, $t01, $t02) = @_;
  my $elapsed   = tv_interval($t01, $t02);
  my $benchmark = timestr(timediff($t2, $t1));
  my $mod_perl  = $ENV{MOD_PERL} || "";
  return { 
    elapsed   => "$elapsed secs",
    benchmark => "$benchmark",
    mod_perl  => "$mod_perl",
    json      => JSON->backend,
    encoding_test => "한글이 제대로 보이는지 점검합니다.",
  };
}

sub next_urls {
  my ($uri) = @_;
  return map { "$_$uri" } qw(
        http://search-twitter-app1:3080
        http://search-twitter-app2:3080
        http://search-twitter-app3:3080
    );
}

sub decode_utf8_in_complex_data {
  my ($var) = @_;
  if ( ref $var eq "HASH" ) {
    foreach my $key ( keys %{$var} ) {
      next unless defined $var->{$key};
      if ( ref $var->{$key} ) {
        decode_utf8_in_complex_data($var->{$key});
      } else {
        eval {
          utf8::is_utf8($var->{$key})
            or $var->{$key}
            = Encode::decode("utf8", $var->{$key});
        };
        warn "\$var->{$key} has invalid character." if $@;
      }
    }
  } elsif ( ref $var eq "ARRAY" ) {
    for ( my $i = 0; $i <= $#{$var}; $i++ ) {
      next unless defined ${$var}[$i];
      if ( ref ${$var}[$i] ) {
        decode_utf8_in_complex_data(${$var}[$i]);
      } else {
        eval {
          utf8::is_utf8(${$var}[$i])
            or ${$var}[$i] = Encode::decode("utf8", ${$var}[$i]);
        };
        warn "\$var[$i] has invalid character." if $@;
      }
    }
  } else {
    ; # do nothing
  }
  return $var;
}

sub handler_index {
  return ( index => { map { $_ => "$full_url/$_" } sort keys %dispatch } );
}

sub mysql_dbh {
  use DBI;
  my $dbh = DBI->connect(@_);
  return $dbh;
}

###############################################################################
sub app1_mysql {
  my @slaves = (
    q(10.10.208.21),
    q(10.10.208.31),
    q(10.10.208.77),
  );
  my $host = $slaves[ int(rand(3)) ];
  my $schema  = "twapp1";
  my $db_user = "twapp1";
  my $db_pass = "app!@#";
  unless ( $q->server_port eq "80"
       and defined $ENV{GATEWAY_INTERFACE} ) {
     $schema  = "twapp1t";
     $db_user = "twapp1t";
     $db_pass = "app123";
  }
  return (qq(dbi:mysql:database=$schema;host=$host), $db_user, $db_pass);
}

sub app2_mysql {
  my @slaves = (
    q(10.10.208.21),
    q(10.10.208.31),
    q(10.10.208.77),
  );
  my $host = $slaves[ int(rand(3)) ];
  my $schema  = "twapp2";
  my $db_user = "twapp1";
  my $db_pass = "app!@#";
  unless ( $q->server_port eq "80"
       and defined $ENV{GATEWAY_INTERFACE} ) {
     $schema  = "twapp2t";
     $db_user = "twapp1t";
     $db_pass = "app123";
  }
  return (qq(dbi:mysql:database=$schema;host=$host), $db_user, $db_pass);
}

sub realtime_dbh {
  use DBI;
  my $database = q(dbi:mysql:database=realtime;host=10.30.143.73);
  my $db_user = q(cdwuser);
  my $db_pass = q(cdwuserdb);

  my $dbh = DBI->connect($database, $db_user, $db_pass);
  return $dbh;
}
###############################################################################
sub district_list {
  my $limit     = param('limit') || 15;

  my $app2_dbh = mysql_dbh( app2_mysql() );
# 격전지별 전체 후보 추출
  my $sql = q{
SELECT 
    c.sido_cd, c.sido_name, c.sido_short_name, c.cp_election_district_id, 
    c.election_district_short_name, group_concat(c.candidate_name) as candidate_name,
    d.x as wcongnamul_x, d.y as wcongnamul_y
FROM candidate c, district_map_coordinates d
WHERE c.cp_election_district_id = d.cp_election_district_id
GROUP BY cp_election_district_id
  };
  my $list = $app2_dbh->selectall_arrayref($sql, { Slice => {} });

  my $app1_dbh = mysql_dbh(app1_mysql());
# 1시간 단위 전체 후보자 언급 횟수 추출.
# TODO: 테스트에서는 1일 단위로 처리, 변경 필요.
  $sql = q{
SELECT word, sum(mention_count) as cnt
FROM wave_rank_mention_count 
WHERE pub_date_begin > date_sub(now(), interval 1 day)
GROUP BY word
  };
  my $counts_ref = $app1_dbh->selectall_arrayref($sql, { Slice => {} });

  # Create an array of counts.
  my %counts = ();
  my $total = 0;
  foreach my $row ( @{$counts_ref} ) {
    $counts{$row->{word}} = $row->{cnt};
    $total = $total + $row->{cnt};
  }

  # Manipulate results. 
  foreach my $row ( @{$list} ) {
    $row->{tw_mentioned_count} = 0;
    foreach my $candidate (split(',', $row->{candidate_name})) {
      $row->{tw_mentioned_count} = $row->{tw_mentioned_count} + $counts{$candidate} if exists $counts{$candidate}
    }

    $row->{tw_mentioned_share} = sprintf("%.3f", $row->{tw_mentioned_count} / $total) * 100;
  }

  # Sorting.
  my @sorted = sort {$b->{tw_mentioned_count} <=> $a->{tw_mentioned_count}} @{$list};

  # Limiting array results.
  foreach my $index(0 .. $#sorted) {
    delete $sorted[$index] if $index > $limit - 1;
  }

  my $help = {
    "API:name" => "격전지 왼쪽 리스트",
    "API:desc" => "이 시각 SNS 격전지에서 사용, 기본 15개",
    sido_cd => "특별/광역/도 코드",
    sido_name => "특별/광역/도 이름",
    sido_short_name => "특별/광역/도 이름의 약칭",
    cp_election_district_id => "CP_선거구ID",
    election_district_name => "선거구 이름",
    election_district_short_name => "선거구 이름의 약칭",
    tw_mentioned_count => "트위터에서 이름이 언급된 횟수",
    tw_mentioned_share => "트위터에서 이름이 언급된 점유율(%)",
    wcongnamul_x => "지도 좌표",
    wcongnamul_y => "지도 좌표",
  };

  return (
    results => \@sorted,
    help => $help,
    debug => {
      app1_mysql => (app1_mysql())[0],
      app2_mysql => (app2_mysql())[0],
    },
  );
}

sub district {
  my $id = param('id');

  my @mysql_dsn = app2_mysql();
  my $dbh = mysql_dbh(@mysql_dsn);
# 특정 격전지 후보 추출
  my $sql = q{
SELECT 
       c.homo_id, c.cp_person_id, c.candidate_name, c.election_symbol,
       c.cp_party_id_1, c.cp_party_id_2, c.party_name, c.party_short_name,
       c.twitter_id, c.cp_election_district_id,
       d.x as wcongnamul_x, d.y as wcongnamul_y
FROM candidate c, district_map_coordinates d
WHERE c.cp_election_district_id = d.cp_election_district_id
AND c.cp_election_district_id = ?
  };
  my $list = $dbh->selectall_arrayref($sql, { Slice => {} }, $id);
  
  $dbh = mysql_dbh(app1_mysql());
# 최근 6일간 전체 언급 수 추출
  $sql = q{
SELECT date(pub_date_begin) as `date`, sum(mention_count) as `sum` 
FROM wave_rank_mention_count
GROUP BY date(pub_date_begin)
ORDER BY date desc
LIMIT 6
  };
  my $counts_ref = $dbh->selectall_arrayref($sql, { Slice => {} });

  # Create an array of total counts.
  my %totalcount = ();
  foreach my $row ( @{$counts_ref} ) {
    $totalcount{$row->{date}} = $row->{sum};
  }

  foreach my $row ( @{$list} ) {
# 최근 6일간 후보자 언급 수 추출
    $sql = q{
SELECT date(pub_date_begin) as `date`, sum(mention_count) as `cnt` 
FROM wave_rank_mention_count
WHERE word = ?
  AND pub_date_begin > date_sub(now(), interval 5 day)
GROUP BY date(pub_date_begin)
ORDER BY date desc
LIMIT 6
  };
    my $mentions_ref = $dbh->selectall_arrayref($sql, { Slice => {} }, Encode::decode("utf8", $row->{candidate_name}));
    my %shared_history = ();

    foreach my $r ( @{$mentions_ref} ) {
      $shared_history{$r->{date}} = sprintf("%.3f", $r->{cnt} / $totalcount{$r->{date}}) * 100;
    }

    $row->{tw_shared_history} = \%shared_history;
  }

  my $help = {
    "API:name" => "격전지 상세",
    "API:desc" => "",
    nownum  => "순위",
    homo_id => "통합검색 인물ID",
    cp_person_id => "CP 인물ID",
    candidate_name => "후보자 이름",
    election_symbol => "기호",
    cp_party_id_1 => "CP 정당ID",
    cp_party_id_2 => "CP 정당ID",
    party_name => "정당이름",
    party_short_name => "정당이름 약칭",
    twitter_id => "트위터ID",
    tw_shared_history => "최근 6일간 점유율 히스토리(%)",
    wcongnamul_x => "지도 좌표",
    wcongnamul_y => "지도 좌표",
  };

  return (
    results => $list,
    help => $help,
    debug => {
      app1_mysql => (app1_mysql())[0],
      app2_mysql => (app2_mysql())[0],
    },
  );
}

sub sns_map {
  use Time::localtime;
  my $t = localtime;
  
  my $date = param('date') || sprintf( "%04d-%02d-%02d", $t->year + 1900, $t->mon + 1, $t->mday);

  my @mysql_dsn = app1_mysql();
  my $dbh = mysql_dbh(@mysql_dsn);
# 특정일 전체 언급 수 추출
  my $sql = q{
SELECT sum(mention_count)
FROM wave_rank_mention_count
WHERE date(pub_date_begin) = ?
  };
  my $totalcount = $dbh->selectrow_arrayref($sql, { Slice => {} }, $date);

# 특정일에 따른 후보자 언급 수
  $sql = q{
SELECT word, sum(mention_count) as tw_mentioned_count, date(pub_date_begin) as `date`
FROM wave_rank_mention_count
WHERE date(pub_date_begin) = ?
GROUP BY date(pub_date_begin), word 
ORDER BY tw_mentioned_count DESC 
LIMIT 100
  };
  my $list = $dbh->selectall_arrayref($sql, { Slice => {} }, $date);

  $dbh = mysql_dbh(app2_mysql());
  foreach my $row ( @{$list} ) {
    my $sql = q{
SELECT 
       homo_id, cp_person_id, candidate_name, election_symbol,
       cp_party_id_1, cp_party_id_2, party_name, party_short_name,
       twitter_id, cp_election_district_id
FROM candidate
WHERE candidate_name = ?
    };
    my $candidate = $dbh->selectrow_hashref($sql, { Slice => {} }, Encode::decode("utf8", $row->{word}));

    $row->{tw_mentioned_total} = @{$totalcount}[0];
    $row->{tw_mentioned_share} = sprintf("%.3f", $row->{tw_mentioned_count} / @{$totalcount}[0]) * 100;
    $row->{homo_id} = $candidate->{homo_id};
    $row->{cp_person_id} = $candidate->{cp_person_id};
    $row->{cp_party_id_1} = $candidate->{cp_party_id_1};
    $row->{cp_party_id_2} = $candidate->{cp_party_id_2};
    $row->{cp_election_district_id} = $candidate->{cp_election_district_id};
  }

  my $help = {
    "API:name" => "SNS 맵",
    "API:desc" => "후보자 SNS 점유율 맵을 그리기 위한 용도",
    word => "언급된 후보자명",
    tw_mentioned_count => "후보자 언급 횟수",
    tw_mentioned_total => "총선 후보 전체 트윗 수",
    tw_mentioned_share => "점유율",
    homo_id => "검색 인물 정보ID",
    cp_person_id => "CP 인물ID",
    cp_party_id_1 => "CP 정당ID",
    cp_party_id_2 => "CP 정당ID",
    cp_election_district_id => "CP_선거구ID",
  };

  return (
    results => $list,
    help => $help,
    debug => { mysql => $mysql_dsn[0], },
  );
}

sub sns_map_detail {
  my $homo_id = param('homo_id');

  my @mysql_dsn = app2_mysql();
  my $dbh = mysql_dbh(@mysql_dsn);
  my $sql = q{
select * from candidate where homo_id = ?
  };
 
  my $list = $dbh->selectall_arrayref($sql, { Slice => {} }, $homo_id);

  foreach my $row ( @{$list} ) {
    $row->{total} = 2421551;
    $row->{homo_id} = int(rand(10000));
    $row->{cp_person_id} = int(rand(10000));
    $row->{cp_party_id} = 1;
  }

  my $help = {
    "API:name" => "SNS 맵",
    "API:desc" => "후보자 SNS 점유율 맵을 그리기 위한 용도",
    word => "언급된 후보자명",
    tw_mentioned_count => "언급된 횟수(하루단위)",
    total => "전체 언급 횟수",
    date => "조회 날짜",
    home_id => "",
    cp_person_id => "",
    cp_party_id => "정당 코드",
  };
  
  return (
    results => $list,
    help => $help,
    debug => { mysql => $mysql_dsn[0], },
  );
}

sub election_candidate {
  my (@where, @where_param);
  foreach ( qw( homo_id cp_person_id cp_party_id_1 cp_party_id_2
                cp_election_district_id twitter_id ) ) {
    my @this_param = param($_);
    foreach my $value ( @this_param ) {
      push @where, "candidate.$_ = ?";
      push @where_param, $value;
    }
  }
  push @where, "1" if scalar @where < 1;
  my $sql_where = join(" OR ", @where);

  my @mysql_dsn = app2_mysql();
  my $dbh = mysql_dbh(@mysql_dsn);
  my $sql = q{
SELECT @rownum := @rownum + 1 AS rownum,
       d.*
FROM
( SELECT candidate.*, map.x AS wcongnamul_x, map.y AS wcongnamul_y
  FROM candidate, district_map_coordinates map
  WHERE candidate.cp_election_district_id = map.cp_election_district_id
        AND ( } . $sql_where . q{ )
) d,
( SELECT @rownum := 0 ) r
  };
  my $help = {
    nownum  => "순위",
    homo_id => "통합검색 인물ID",
    cp_person_id => "CP 인물ID",
    candidate_name => "후보자 이름",
    election_symbol => "기호",
    cp_party_id_1 => "CP 정당ID",
    cp_party_id_2 => "CP 정당ID",
    party_name => "정당이름",
    party_short_name => "정당이름 약칭",
    twitter_id => "트위터ID",
    #latitude  => "WGS-84 위도",
    #longitude => "WGS-84 경도",
  };

  return (
    results => $dbh->selectall_arrayref($sql, { Slice => {} }, @where_param),
    help => $help,
    debug => { mysql => $mysql_dsn[0], },
  );
}

sub realtime_ddm_dynamic_status {
  my $dbh = realtime_dbh();
  my ($max_id) = $dbh->selectrow_array( q{select max(id) from realtime_article});
  my ($min_id) = $dbh->selectrow_array( q{select min(id) from realtime_article});

  return ( status => {
    min_id  => $min_id,
    min_url => "$full_url/realtime_ddm_dynamic_list?from=$min_id",
    max_id  => $max_id,
    max_url => "$full_url/realtime_ddm_dynamic_list?from=$max_id",
  });
}

sub realtime_ddm_dynamic_list {
  my $from     = param('from');
  my $count    = param('count') || 100;

  my $dbh = realtime_dbh();
  ($from) = $dbh->selectrow_array(
              q{select max(id) from realtime_article}
            ) unless defined $from;

  my $sql = q(select * from realtime_article where id between ? and ?);
  my $list = $dbh->selectall_arrayref($sql, { Slice => {} }, $from, $from+$count-1);

  my $max_id = $from;
  foreach my $row ( @{$list} ) {
    $max_id = $row->{id} if $max_id < $row->{id};
  }
  my $next = $max_id + 1;
  return (
    next_urls      => [ next_urls($q->url(-path_info=>1,-absolute=>1) . "?from=$next&count=$count") ],
    format_version => "json_breeze_ds_0.1",
    results           => $list,
  );
}

